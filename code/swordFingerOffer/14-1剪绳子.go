package main

/**
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。
请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
示例 1：
输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 ×3 ×4 = 36

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/jian-sheng-zi-lcof
 */


/**
思路：贪心算法很简单，我们通过推论可以看出，最大乘积的组合一定是3*3*3....这种分割的乘积才能是最大的，也就是要将绳子尽量分成长度为3的段，当剩下1的时候加到前一段绳子（最后一段变为4）

这种思路很简单，找规律..但是一般这种题还是用动态规划解题比较符合面试官的调性
动态规划的问题...我们先找动态规划的三要素
-dp数组：index是绳子长度，value值是最大乘积
-状态转移方程： 我们将一个绳子先分割出一小段，这小段的长度可以是任意 i（但是注意不能是1，因为1相乘没有意义），这样这一小段的取值范围就是[2,n),那么这样F(N)情况有两种：
	1：剩下的绳子不继续分割的话 那么 F(N) = i * (n-i)
	2：剩下的绳子继续分割，那么 F(N) = i * F(n-i)
	最终得出：F(N) = max(i * (n-i),i * F(n-i)) i需要遍历从2到n
-初始值：F(O)=0  F(1)=1 F(2)=1
 */

func cuttingRope(n int) int {
	var dp []int
	dp = append(dp,0,1,1)
	for n1 := 3; n1 <= n; n1++ {
		dp = append(dp,0)
		for i := 2; i < n1; i++ {
			if i*(n1-i) > dp[n1] {
				dp[n1] = i*(n1-i)
			}
			if i*dp[n1-i] > dp[n1] {
				dp[n1] = i*dp[n1-i]
			}
		}
	}
	return dp[n]
}