package main

/**
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。
请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
示例 1：
输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例2:
输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 ×3 ×4 = 36

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/jian-sheng-zi-ii-lcof
 */

/**
思路：一开始我属实不明白这个和内个剪绳子I有啥区别？？ 难道就是多了最后的答案需要取模？？？
但是随着我使用动态规划写完之后我发现，too young too simple 了，这题在过程中不能取模，因为动态规划是记录历史的结果，当前的结果是受到历史结果影响的....过程中取模，会直接影响最终结果 TMD(阴险)
没办法..只能用贪心算法..也就是我们说的尽量分成长度为3的段..
 */

func cuttingRopeII(n int) int {
	if n < 4 {
		return n-1
	}
	res := 1
	for n > 4 {
		res = res * 3 % 1000000007
		n -= 3
	}
	return res * n % 1000000007
}