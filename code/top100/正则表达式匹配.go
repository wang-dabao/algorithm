package main

import "fmt"

//给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
// '.' 匹配任意单个字符
// '*' 匹配零个或多个前面的那一个元素
// 所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。
// 示例 1：
//输入：s = "aa" p = "a"
//输出：false
//解释："a" 无法匹配 "aa" 整个字符串。
// 示例 2:
//输入：s = "aa" p = "a*"
//输出：true
//解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
// 示例 3：
//输入：s = "ab" p = ".*"
//输出：true
//解释：".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
// 示例 4：
//输入：s = "aab" p = "c*a*b"
//输出：true
//解释：因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
// 示例 5：
//输入：s = "mississippi" p = "mis*is*p*."
//输出：false

// 0 <= s.length <= 20
// 0 <= p.length <= 30
// s 可能为空，且只包含从 a-z 的小写字母。
// p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
// 保证每次出现字符 * 时，前面都匹配到有效的字符
// Related Topics 递归 字符串 动态规划

func isMatch(s string, p string) bool {
	//思路：动态规划，因为如果能匹配的话，从s的任意一个子串都能找出p的一个子串预期匹配，符合动态规划的最小子集，而且最后的结果受子集的印象
	//动态规划，首先dp数组 dp[i][j] 含义是 s[i]能被p[j]所匹配。值是true/false 转态转移方程的思路 dp[i][j] 他是由dp[i-1][j-1]所得来的，那分析有几种情况
	//1.s[i] = p[j]  ==> dp[i][j] = dp[i-1][j-1]  这个没啥说的，取决于前面的值
	//2.p[j] = '.'   ==> dp[i][j] = dp[i-1][j-1]  他匹配所有的单个字节
	//3.p[j] = '*' 这个比较复杂，当是*的时候，代表0个或多个匹配 也就是当 s[i] = p[j-1] 的时候也就能匹配的上
	//  3.1 s[i] = p[j-1] || p[j-1] = '.'  如果满足这个条件，有几种情况,他们之间都是或的关系。满足一种即可
	//     3.1.1 ==> dp[i][j] = dp[i-1][j] 如果s字符串去掉一个字符还能和p匹配，那由于s[i] = p[j-1]的。所以加上后肯定也匹配
	//     3.1.2 ==> dp[i][j] = dp[i][j-1] 如果s字符串能与p去掉'*'匹配，那呢加上*后肯定也匹配
	//     3.1.3 ==> dp[i][j] = dp[i][j-2] 如果s字符串能与p去掉'*'和前面的字符匹配，那么'#*'这种可以是匹配0次的
	//  3.2 s[i] != p[j-1]  ==> dp[i][j] = dp[i][j-2] 这个好理解
	m,n := len(s),len(p)
	//初始化数组，初始化值，因为i,j是长度 所以dp[0][0] 相当于两个空字符串 肯定是true
	dp := make([][]bool, m+1)
	for o := 0; o < len(dp); o++ {
		dp[o] = make([]bool,n+1)
	}
	dp[0][0] = true

	//遍历两个字符串，注意字符串的下标是从0开始，数组中的i,j代表着字符串长度
	for i := 0; i <= m; i++ {
		for j := 1; j <= n; j++ {
			//边界i=0 也就是s是空串的时候的值
			if i == 0 {
				if p[j-1] == '*' {
					dp[i][j] = dp[i][j-2]
				}
				continue
			}
			//s[i] = p[j]  || p[j] = '.'
			if s[i-1] == p[j-1] || p[j-1] == '.' {
				dp[i][j] = dp[i-1][j-1]
				continue
			}
			//p[j] = '*'
			if p[j-1] == '*' {
				if s[i-1] == p[j-1-1] || p[j-1-1] == '.' {
					dp[i][j] = dp[i-1][j] || dp[i][j-1] || dp[i][j-2]
				}else if s[i-1] != p[j-1-1] {
					dp[i][j] = dp[i][j-2]
				}
				continue
			}
		}
	}
	return dp[m][n]  //时间复杂度O(m*n)
}

func main() {
	fmt.Print(isMatch("","*"))
}