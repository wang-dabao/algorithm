package main

//一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。
// 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
// 示例 1：
// 输入：n = 2
//输出：2
// 示例 2：
// 输入：n = 7
//输出：21
// 示例 3：
// 输入：n = 0
//输出：1
func numWays(n int) int {
	//和波非那切数列一样
	//思路：动态规划 先确定dp[]的含义 下角标是台阶数量，值是多少种
	//再确定状态转移方程 到顶f(n)想要到顶，最后除非是跳了一个台阶，或者两个 也就是说f(n)= f(n-1) + f(n-2)
	//初始值f(0)=0 f(1)=1 f(2)=2
	var dp []int
	dp = append(dp,1,1,2)
	for i := 3; i <= n; i++ {
		dp = append(dp,(dp[i-1]+dp[i-2]) % 1000000007)
	}
	return dp[n]
}

